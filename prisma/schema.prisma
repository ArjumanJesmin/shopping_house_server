generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  password  String
  profile   Profile?
  orders    Order[]
  reviews   Review[]
  imageUrl  String?
  location  Location?
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("user")
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bio       String
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profile")
}

model Location {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  state      String
  country    String
  postalCode String
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("location")
}

model Admin {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  email      String     @unique
  name       String
  password   String
  products   Product[]
  categories Category[]
  orders     Order[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("admin")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  imageUrl    String?
  stock       Int
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  adminId     String      @db.ObjectId
  admin       Admin       @relation(fields: [adminId], references: [id])
  OrderItem   OrderItem[]

  @@map("product")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  adminId   String    @db.ObjectId
  admin     Admin     @relation(fields: [adminId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("caregory")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  total      Float
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
  shipping   Shipping?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  adminId    String?     @db.ObjectId
  admin      Admin?      @relation(fields: [adminId], references: [id])

  @@map("order")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orderItem")
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  orderId   String        @unique @db.ObjectId
  order     Order         @relation(fields: [orderId], references: [id])
  status    String
  method    PaymentMethod
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("paymennt")
}

model Shipping {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  state      String
  country    String
  postalCode String
  orderId    String   @unique @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("shopping")
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}
